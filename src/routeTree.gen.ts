/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as privateRouteRouteImport } from './routes/(private)/route'
import { Route as privateIndexRouteImport } from './routes/(private)/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'

const privateRouteRoute = privateRouteRouteImport.update({
  id: '/(private)',
  getParentRoute: () => rootRouteImport,
} as any)
const privateIndexRoute = privateIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => privateRouteRoute,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/': typeof privateIndexRoute
}
export interface FileRoutesByTo {
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/': typeof privateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(private)': typeof privateRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/(private)/': typeof privateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/demo/tanstack-query' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/demo/tanstack-query' | '/'
  id: '__root__' | '/(private)' | '/demo/tanstack-query' | '/(private)/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  privateRouteRoute: typeof privateRouteRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(private)': {
      id: '/(private)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof privateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(private)/': {
      id: '/(private)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof privateIndexRouteImport
      parentRoute: typeof privateRouteRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface privateRouteRouteChildren {
  privateIndexRoute: typeof privateIndexRoute
}

const privateRouteRouteChildren: privateRouteRouteChildren = {
  privateIndexRoute: privateIndexRoute,
}

const privateRouteRouteWithChildren = privateRouteRoute._addFileChildren(
  privateRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  privateRouteRoute: privateRouteRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
