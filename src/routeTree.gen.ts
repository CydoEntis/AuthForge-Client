/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PrivateRouteRouteImport } from './routes/private/route'
import { Route as publicRouteRouteImport } from './routes/(public)/route'
import { Route as PrivateIndexRouteImport } from './routes/private/index'
import { Route as publicIndexRouteImport } from './routes/(public)/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo/tanstack-query'

const PrivateRouteRoute = PrivateRouteRouteImport.update({
  id: '/private',
  path: '/private',
  getParentRoute: () => rootRouteImport,
} as any)
const publicRouteRoute = publicRouteRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateIndexRoute = PrivateIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const publicIndexRoute = publicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicRouteRoute,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/private': typeof PrivateRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/': typeof publicIndexRoute
  '/private/': typeof PrivateIndexRoute
}
export interface FileRoutesByTo {
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/': typeof publicIndexRoute
  '/private': typeof PrivateIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(public)': typeof publicRouteRouteWithChildren
  '/private': typeof PrivateRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/(public)/': typeof publicIndexRoute
  '/private/': typeof PrivateIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/private' | '/demo/tanstack-query' | '/' | '/private/'
  fileRoutesByTo: FileRoutesByTo
  to: '/demo/tanstack-query' | '/' | '/private'
  id:
    | '__root__'
    | '/(public)'
    | '/private'
    | '/demo/tanstack-query'
    | '/(public)/'
    | '/private/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  publicRouteRoute: typeof publicRouteRouteWithChildren
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/private': {
      id: '/private'
      path: '/private'
      fullPath: '/private'
      preLoaderRoute: typeof PrivateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)': {
      id: '/(public)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof publicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/private/': {
      id: '/private/'
      path: '/'
      fullPath: '/private/'
      preLoaderRoute: typeof PrivateIndexRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/(public)/': {
      id: '/(public)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface publicRouteRouteChildren {
  publicIndexRoute: typeof publicIndexRoute
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicIndexRoute: publicIndexRoute,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

interface PrivateRouteRouteChildren {
  PrivateIndexRoute: typeof PrivateIndexRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateIndexRoute: PrivateIndexRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  publicRouteRoute: publicRouteRouteWithChildren,
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
