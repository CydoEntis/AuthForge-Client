/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as setupRouteRouteImport } from './routes/(setup)/route'
import { Route as publicRouteRouteImport } from './routes/(public)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as setupSetupRouteImport } from './routes/(setup)/setup'
import { Route as publicDashboardRouteRouteImport } from './routes/(public)/dashboard/route'
import { Route as publicauthRouteRouteImport } from './routes/(public)/(auth)/route'
import { Route as publicDashboardIndexRouteImport } from './routes/(public)/dashboard/index'
import { Route as publicauthLoginRouteImport } from './routes/(public)/(auth)/login'
import { Route as publicauthForgotPasswordRouteImport } from './routes/(public)/(auth)/forgot-password'

const setupRouteRoute = setupRouteRouteImport.update({
  id: '/(setup)',
  getParentRoute: () => rootRouteImport,
} as any)
const publicRouteRoute = publicRouteRouteImport.update({
  id: '/(public)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const setupSetupRoute = setupSetupRouteImport.update({
  id: '/setup',
  path: '/setup',
  getParentRoute: () => setupRouteRoute,
} as any)
const publicDashboardRouteRoute = publicDashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => publicRouteRoute,
} as any)
const publicauthRouteRoute = publicauthRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => publicRouteRoute,
} as any)
const publicDashboardIndexRoute = publicDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => publicDashboardRouteRoute,
} as any)
const publicauthLoginRoute = publicauthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => publicauthRouteRoute,
} as any)
const publicauthForgotPasswordRoute =
  publicauthForgotPasswordRouteImport.update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => publicauthRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof publicDashboardRouteRouteWithChildren
  '/setup': typeof setupSetupRoute
  '/forgot-password': typeof publicauthForgotPasswordRoute
  '/login': typeof publicauthLoginRoute
  '/dashboard/': typeof publicDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/setup': typeof setupSetupRoute
  '/forgot-password': typeof publicauthForgotPasswordRoute
  '/login': typeof publicauthLoginRoute
  '/dashboard': typeof publicDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(public)': typeof publicRouteRouteWithChildren
  '/(setup)': typeof setupRouteRouteWithChildren
  '/(public)/(auth)': typeof publicauthRouteRouteWithChildren
  '/(public)/dashboard': typeof publicDashboardRouteRouteWithChildren
  '/(setup)/setup': typeof setupSetupRoute
  '/(public)/(auth)/forgot-password': typeof publicauthForgotPasswordRoute
  '/(public)/(auth)/login': typeof publicauthLoginRoute
  '/(public)/dashboard/': typeof publicDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/setup'
    | '/forgot-password'
    | '/login'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/setup' | '/forgot-password' | '/login' | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/(public)'
    | '/(setup)'
    | '/(public)/(auth)'
    | '/(public)/dashboard'
    | '/(setup)/setup'
    | '/(public)/(auth)/forgot-password'
    | '/(public)/(auth)/login'
    | '/(public)/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  publicRouteRoute: typeof publicRouteRouteWithChildren
  setupRouteRoute: typeof setupRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(setup)': {
      id: '/(setup)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof setupRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(public)': {
      id: '/(public)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof publicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(setup)/setup': {
      id: '/(setup)/setup'
      path: '/setup'
      fullPath: '/setup'
      preLoaderRoute: typeof setupSetupRouteImport
      parentRoute: typeof setupRouteRoute
    }
    '/(public)/dashboard': {
      id: '/(public)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof publicDashboardRouteRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/(auth)': {
      id: '/(public)/(auth)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof publicauthRouteRouteImport
      parentRoute: typeof publicRouteRoute
    }
    '/(public)/dashboard/': {
      id: '/(public)/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof publicDashboardIndexRouteImport
      parentRoute: typeof publicDashboardRouteRoute
    }
    '/(public)/(auth)/login': {
      id: '/(public)/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof publicauthLoginRouteImport
      parentRoute: typeof publicauthRouteRoute
    }
    '/(public)/(auth)/forgot-password': {
      id: '/(public)/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof publicauthForgotPasswordRouteImport
      parentRoute: typeof publicauthRouteRoute
    }
  }
}

interface publicauthRouteRouteChildren {
  publicauthForgotPasswordRoute: typeof publicauthForgotPasswordRoute
  publicauthLoginRoute: typeof publicauthLoginRoute
}

const publicauthRouteRouteChildren: publicauthRouteRouteChildren = {
  publicauthForgotPasswordRoute: publicauthForgotPasswordRoute,
  publicauthLoginRoute: publicauthLoginRoute,
}

const publicauthRouteRouteWithChildren = publicauthRouteRoute._addFileChildren(
  publicauthRouteRouteChildren,
)

interface publicDashboardRouteRouteChildren {
  publicDashboardIndexRoute: typeof publicDashboardIndexRoute
}

const publicDashboardRouteRouteChildren: publicDashboardRouteRouteChildren = {
  publicDashboardIndexRoute: publicDashboardIndexRoute,
}

const publicDashboardRouteRouteWithChildren =
  publicDashboardRouteRoute._addFileChildren(publicDashboardRouteRouteChildren)

interface publicRouteRouteChildren {
  publicauthRouteRoute: typeof publicauthRouteRouteWithChildren
  publicDashboardRouteRoute: typeof publicDashboardRouteRouteWithChildren
}

const publicRouteRouteChildren: publicRouteRouteChildren = {
  publicauthRouteRoute: publicauthRouteRouteWithChildren,
  publicDashboardRouteRoute: publicDashboardRouteRouteWithChildren,
}

const publicRouteRouteWithChildren = publicRouteRoute._addFileChildren(
  publicRouteRouteChildren,
)

interface setupRouteRouteChildren {
  setupSetupRoute: typeof setupSetupRoute
}

const setupRouteRouteChildren: setupRouteRouteChildren = {
  setupSetupRoute: setupSetupRoute,
}

const setupRouteRouteWithChildren = setupRouteRoute._addFileChildren(
  setupRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  publicRouteRoute: publicRouteRouteWithChildren,
  setupRouteRoute: setupRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
